{
  "swagger": "2.0",
  "info": {
    "description": "REST CRUD Interface",
    "title": "REST CRUD Interface",
    "version": "v1"
  },
  "host": "crud.org",
  "schemes": [
    "http"
  ],
  "basePath": "/",
  "paths": {
    "/api/event": {
      "get": {
        "summary": "List Events",
        "parameters":[{
          "name":"page",
          "in":"query",
          "type":"integer",
          "required":false
        },{
          "name":"hitsperpage",
          "in":"query",
          "type":"integer",
          "required":false
        }
        ,{
          "name":"sortBy",
          "in":"query",
          "type":"string",
          "required":false
        },{
          "name":"sortDirection",
          "in":"query",
          "type":"string",
          "enum": ["asc", "desc"],
          "required":false
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "type":"array",
              "items": {
                "$ref": "#/definitions/PageableEventList"
              }
            }
          }
        }
      },
      "post":{
        "summary": "Creates an Event",
        "consumes":[ "application/x-www-form-urlencoded" ],
        "produces":[ "application/json" ],
        "operationId":"newEvent",
        "parameters":[{
          "in":"body",
          "name":"newEvent",
          "required":true,
          "schema": {
            "$ref": "#/definitions/Event"
          }
        }],
        "responses": {
          "200":{
            "description":"created",
            "schema": {
              "type": "string" # the ID of the created Event entity
            }
          },
          "400":{
            "description":"invalid event"
          }
        }
      }
    },
    "/api/event/{id}": {
      "get": {
        "summary": "Get Events By Id",
        "parameters": [{
          "name":"id",
          "in":"path",
          "required":true,
          "type":"integer",
          "format":"int64"
        }],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "put" : {
        "summary": "Updates an Event",
        "consumes":[ "application/x-www-form-urlencoded" ],
        "produces":[ "application/json" ],
        "operationId":"editEvent",
        "parameters":[{
          "name":"id",
          "in":"path",
          "required":true,
          "type":"string"
          },
          {
          "in":"body",
          "name":"event",
          "required":true,
          "schema": {
            "$ref": "#/definitions/Event"
          }
        }],
        "responses": {
          "200":{
            "description":"updated",
            "schema": {
              "type": "boolean",
              "default":false
            }
          },
          "400":{
            "description":"invalid event"
          }
        }
      },
      "delete" : {
        "summary": "Deletes an Event",
        "produces":[ "application/json" ],
        "operationId":"delEvent",
        "parameters":[{
          "name":"id",
          "in":"path",
          "required":true,
          "type":"string"
        }],
        "responses": {
          "200":{
            "description":"deleted",
            "schema": {
              "type": "boolean",
              "default":false
            }
          },
          "400":{
            "description":"invalid event id"
          }
        }
      }
    }
  },
  "definitions":
  {
  	"PageableEventList" :
  	{
      "type":"object",
      "properties":
      {
      	"content":
      	{
          "type":"array",
          "items": {
            "$ref": "#/definitions/Event"
          }
      	},
      	"totalPages" :
      	{
          "type":"integer",
          "format":"int64"
      	},
      	"totalElements" :
      	{
          "type":"integer",
          "format":"int64"
      	}
      	# other attrs of org.springframework.data.domain.Page not yet modeled
  	  }
  	},
    "Event":
    {
      "type":"object",
      "properties":
      {
        "id" :
        {
          "type":"string"
        },
        "title" :
        {
          "type":"string"
        },
        "startDate" :
        {
          "type":"integer", # unix timestamp in milliseconds
          "format":"int64"
        },
        "endDate" :
        {
          "type":"integer", # unix timestamp in milliseconds
          "format":"int64"
        },
        "type" : # alternative: enum (in this case it would not be user-extendable)
        {
          "type":"string"
        },
        "location" : # note: in future an extra model structure
        {
          "type":"string"
        },
        "description" :
        {
          "type":"string"
        },
        "participants" : # list of external contact IDs
        {
          "type":"array",
          "items": {
            "type":"integer",
            "format":"int64"
          }
        },
        "createdBy" : # external user ID
        {
            "type":"integer",
            "format":"int64"
        },
        "lastUpdatedBy" : # external user ID
        {
            "type":"integer",
            "format":"int64"
        },
        "createdAt" : # unix timestamp in milliseconds
        {
            "type":"integer",
            "format":"int64"
        },
        "lastUpdatedAt" : # unix timestamp in milliseconds
        {
            "type":"integer",
            "format":"int64"
        }
      }
    }
  }
  # //TODO: auth! 
}
